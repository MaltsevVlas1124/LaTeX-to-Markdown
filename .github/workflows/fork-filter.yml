name: Fork with Custom .tex Filtering

on:
  workflow_dispatch:  # дозволяє запуск вручну з вкладки Actions

jobs:
  filter-and-commit:
    runs-on: ubuntu-latest

    env:
      SRC_REPO: IlyaCk/statementsToConvert
      DST_REPO: MaltsevVlas1124/statementsToConvert-fork
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      SPECIAL_TEX_DIR: OlympiadsTheirselves/LaTeX # Винесемо шлях у змінну

    steps:
    - name: Checkout destination repo
      uses: actions/checkout@v4
      with:
        repository: ${{ env.DST_REPO }}
        token: ${{ env.GITHUB_TOKEN }}
        path: dest

    - name: Clone source repo
      run: |
        git clone https://github.com/${SRC_REPO}.git source

    - name: Filter files
      run: |
        echo "Starting file filtering..."
        mkdir -p filtered
        cd source

        # --- Крок 1: Копіюємо всі файли, крім .tex ---
        echo "Copying non-.tex files..."
        find . -type f ! -name "*.tex" | while IFS= read -r file; do
          # Пропускаємо файли всередині .git
          if [[ "$file" != *".git/"* ]]; then
            echo "  Copying: $file"
            mkdir -p "../filtered/$(dirname "$file")"
            cp "$file" "../filtered/$file"
          fi
        done

        # --- Крок 2: Копіюємо .tex файли ПОЗА спеціальною папкою ---
        echo "Copying .tex files outside $SPECIAL_TEX_DIR..."
        find . -type f -name "*.tex" -not -path "./$SPECIAL_TEX_DIR/*" | while IFS= read -r file; do
           # Пропускаємо файли всередині .git
           if [[ "$file" != *".git/"* ]]; then
            echo "  Copying: $file"
            mkdir -p "../filtered/$(dirname "$file")"
            cp "$file" "../filtered/$file"
           fi
        done

        # --- Крок 3: Обробка спеціальної папки $SPECIAL_TEX_DIR ---
        if [ -d "$SPECIAL_TEX_DIR" ]; then
          echo "Processing special directory: $SPECIAL_TEX_DIR"
          cd "$SPECIAL_TEX_DIR" # Переходимо у вихідну спеціальну папку

          # Визначаємо цільову директорію ВІДНОСНО ПОТОЧНОГО МІСЦЯ (source/OlympiadsTheirselves/LaTeX)
          target_dir_relative="../../filtered/$SPECIAL_TEX_DIR"

          # Знаходимо унікальні базові префікси
          find . -maxdepth 1 -name '*-*-statement.tex' -printf '%f\n' | \
            sed -E 's/^(.*)-[A-Za-z0-9]+-statement\.tex$/\1/' | \
            sort -u | while IFS= read -r base_prefix; do
            echo "  Processing prefix: $base_prefix"

            # 3а. Копіюємо головний файл (якщо існує)
            main_file="${base_prefix}.tex"
            if [ -f "$main_file" ]; then
              echo "    Copying main file: $main_file"
              mkdir -p "$target_dir_relative" # Створюємо цільову папку ПЕРЕД копіюванням
              cp "$main_file" "$target_dir_relative/"
            fi

            # 3б. Знаходимо та сортуємо ідентифікатори
            mapfile -t identifiers < <(find . -maxdepth 1 -name "${base_prefix}-*-statement.tex" -printf '%f\n' | sed -E "s/^${base_prefix}-(.*)-statement\.tex$/\1/" | sort)

            if [ ${#identifiers[@]} -eq 0 ]; then
              echo "    No statement/tutorial pairs found for $base_prefix"
              continue # Переходимо до наступного префіксу
            fi

            echo "    Found identifiers: ${identifiers[*]}"

            # 3в. Вибираємо та копіюємо пари за індексами 0 (A) та 2 (C)
            indices_to_copy=(0 2) # 0-й (A) та 2-й (C) індекси
            for index in "${indices_to_copy[@]}"; do
              if [ "$index" -lt "${#identifiers[@]}" ]; then
                identifier="${identifiers[$index]}"
                statement_file="${base_prefix}-${identifier}-statement.tex"
                tutorial_file="${base_prefix}-${identifier}-tutorial.tex"

                # Копіюємо statement файл, якщо існує
                if [ -f "$statement_file" ]; then
                   echo "    Copying pair index $index (ID: $identifier): $statement_file"
                   mkdir -p "$target_dir_relative" # Створюємо цільову папку ПЕРЕД копіюванням
                   cp "$statement_file" "$target_dir_relative/"
                else
                   echo "    Warning: Statement file $statement_file not found for index $index (ID: $identifier)"
                fi

                # Копіюємо tutorial файл, якщо існує
                 if [ -f "$tutorial_file" ]; then
                   echo "    Copying pair index $index (ID: $identifier): $tutorial_file"
                   mkdir -p "$target_dir_relative" # Створюємо цільову папку ПЕРЕД копіюванням
                   cp "$tutorial_file" "$target_dir_relative/"
                 else
                   echo "    Warning: Tutorial file $tutorial_file not found for index $index (ID: $identifier)"
                 fi
              else
                 echo "    Warning: Index $index is out of bounds for identifiers of prefix $base_prefix (found ${#identifiers[@]} identifiers)"
              fi
            done # кінець циклу по індексах
          done # кінець циклу по префіксах

          # Повертаємося в корінь папки source
          cd ../../
        else
          echo "Warning: Special directory $SPECIAL_TEX_DIR not found in source repo."
        fi

        # Повертаємося в корінь робочої області workflow
        cd ..
        echo "File filtering finished."

    - name: Move filtered files into destination repo
      run: |
        echo "Moving filtered files to destination..."
        # Використовуємо rsync, АЛЕ виключаємо папку .git з процесу синхронізації/видалення
        # Важливо додати слеш в кінці '.git/', щоб виключити саме директорію
        rsync -av --delete --exclude='.git/' filtered/ dest/ || echo "rsync finished with non-critical errors or no changes."
        # Примітка: --delete видалить у dest/ файли, яких немає у filtered/, КРІМ папки .git. Якщо видалення не бажане, прибери --delete.

    - name: Commit and push changes to a new branch
      run: |
        cd dest
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com" # Рекомендований email для github-actions bot

        BRANCH_NAME="original-filtered"
        # Створює нову гілку або перемикається на існуючу. -B перезаписує локальну, якщо існує
        git checkout -B "$BRANCH_NAME"

        # Додаємо всі зміни.
        git add .

        # Перевірка, чи є що комітити
        if git diff --staged --quiet; then
          echo "Nothing to commit, working tree clean."
        else
          echo "Committing changes..."
          git commit -m "Filtered fork from $SRC_REPO (custom logic for $SPECIAL_TEX_DIR)"
          echo "Pushing changes to $BRANCH_NAME..."
          # Використовуємо --force, оскільки ми повністю перезаписуємо цю гілку
          git push --force origin "$BRANCH_NAME"
        fi
