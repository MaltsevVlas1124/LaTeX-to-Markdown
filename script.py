import os
from pathlib import Path
import chardet

def detect_encoding(file_path):
    with open(file_path, 'rb') as f:
        raw_data = f.read()
        if not raw_data:
            return 'utf-8'  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª
    result = chardet.detect(raw_data)
    return result['encoding']

def convert_to_utf8_bom(file_path):
    encoding = detect_encoding(file_path)
    if encoding is None:
        print(f"[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è: {file_path}")
        return
    try:
        with open(file_path, 'r', encoding=encoding) as f:
            content = f.read()
        with open(file_path, 'w', encoding='utf-8-sig') as f:
            f.write(content)
        print(f"[‚úî] –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ: {file_path} ({encoding} ‚Üí utf-8-sig)")
    except Exception as e:
        print(f"[‚úò] –ü–æ–º–∏–ª–∫–∞ –∑ —Ñ–∞–π–ª–æ–º {file_path}: {e}")

def delete_all_bak_files(root_dir):
    for path in Path(root_dir).rglob('*.bak'):
        try:
            path.unlink()
            print(f"[üóë] –í–∏–¥–∞–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {path}")
        except Exception as e:
            print(f"[‚úò] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ {path}: {e}")

def process_all_md_files(root_dir):
    delete_all_bak_files(root_dir)
    for path in Path(root_dir).rglob('*.md'):
        convert_to_utf8_bom(path)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    process_all_md_files(".")
